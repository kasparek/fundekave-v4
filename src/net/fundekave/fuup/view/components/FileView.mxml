<?xml version="1.0" encoding="utf-8"?>
<fu:Container xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:fu="net.fundekave.*"
	xmlns:bit101="com.bit101.components.*"
	width="300" height="{thumbMaxHeight + 10}">
	<fx:Script>
		<![CDATA[
			import net.fundekave.lib.ImageResize;
			import gs.easing.Quad;
			import gs.TweenLite;
			import net.fundekave.lib.BitmapDataProcess;
			import net.fundekave.fuup.model.vo.FileVO;
			
			import flash.utils.setTimeout;
			import flash.display.Loader;
			
			public static const FILE_CREATED:String = 'fileCreated';
			public static const SETTINGS_INHERIT:String = 'settingsInherit';
			public static const FILE_REMOVE:String = 'fileRemove';
			
			[Bindable]
			private var thumbMaxWidth:Number = 140;
			[Bindable]
			private var thumbMaxHeight:Number = 100;
			
			[Bindable]
			public var statusStr:String = '';
			
			[Bindable]
			private var _fileVO:FileVO;
			
			public function get fileVO():FileVO {
				return _fileVO;
			}
			public function set fileVO(value:FileVO):void {
				_fileVO = value;
			}
			
			public function get file():FileReference {
				return _fileVO.file;
			}
			
			public function set file(value:FileReference):void {
				
				_fileVO = new FileVO( value.name );
				_fileVO.file = value;
				_fileVO.renderer = this;
				
				var imageResize:ImageResize = new ImageResize(thumbMaxWidth,thumbMaxHeight);
				imageResize.loadReference( value );
				imageResize.addEventListener( ImageResize.RESIZED, drawLater );
				this.thumbUI.addChild( imageResize );
							
				this.graphics.beginFill(0xbbbbbb);
				this.graphics.drawRoundRect(0,0,this.width,this.height,5,5);
				this.graphics.endFill();
				
			}
						
			/**
			 * CREATE SMALL THUMBNAIL
			*/
			private function drawLater(e:Event):void {
				var imageResize:ImageResize = e.target as ImageResize;

				var bmp:Bitmap = new Bitmap( imageResize.resultBmpData, PixelSnapping.NEVER, true );
				thumbUI.addChild( bmp );
				thumbUI.width = imageResize.resultBmpData.width;
				thumbUI.height = imageResize.resultBmpData.height;
				bmp.x = -imageResize.resultBmpData.width / 2
				bmp.y = -imageResize.resultBmpData.height / 2
				
				imageResize.dispose();
				
				dispatchEvent( new Event( FILE_CREATED, true ));
			}
			
			private var rotateTo:Number = 0;
			private function rotate(dgDiff:Number):void {
				rotateTo += dgDiff;
				
				TweenLite.to( _fileVO, 0.5, {rotation:rotateTo, ease:Quad.easeInOut, onComplete:onRotateTween} );
				
				if(rotateTo >= 360) rotateTo -= 360;
				if(rotateTo < 0) rotateTo += 360;  
				
			}
			private function onRotateTween():void {
				_fileVO.rotation = Number(rotateTo);
			}
			
			private var inheritWasTrue:Boolean = false;
			private function onInheritChange():void {
				/*
				if(resizeInheritCheckbox.selected == true && inheritWasTrue==true) {
					setTimeout( laterOnInheritChange, 1 );
				} else {
					inheritWasTrue = true;
				}
				*/
			}
			private function laterOnInheritChange():void {
				dispatchEvent(new Event(SETTINGS_INHERIT,true));
			}
			
			private function showResized():void {
				if(fileVO.encodedJPG) {
					var image:Loader = new Loader();
					image.loadBytes( fileVO.encodedJPG );
					this.addChild( image );
					image.addEventListener( MouseEvent.CLICK, onPreviewClick ); 
				}
			}
			
			private function onPreviewClick(e:Event):void {
				var image:Loader = e.currentTarget as Loader;
				image.removeEventListener( MouseEvent.CLICK, onPreviewClick );
				image.parent.removeChild( image );
			}
			
			public function removeView():void {

				this.parent.removeChild( this );
				
			}
			
		]]>
	</fx:Script>
	<!--
	<fx:Binding source="resizeInheritCheckbox.selected" destination="_fileVO.sizeInheritance" />
	<fx:Binding source="maxWidthInput.text as Number" destination="_fileVO.widthMax" />
	<fx:Binding source="maxHeightInput.text as Number" destination="_fileVO.heightMax" />
	-->
	<fu:Container masked="true" backgroundColor="0x000000" border="0" x="5" y="5" width="{thumbMaxWidth}" height="{thumbMaxHeight}">
		<fu:Container id="thumbUI" rotation="{_fileVO.rotation}" x="{thumbMaxWidth/2}" y="{thumbMaxHeight/2}" />
	</fu:Container>
	
	<bit101:PushButton x="{this.width - 40}" width="30" label="x" click="{dispatchEvent(new Event(FILE_REMOVE,true));}" />
	
	<bit101:VBox x="150">
		<bit101:HBox>
			<bit101:InputText id="filenameInput" text="{_fileVO.filename}" restrict="[0-9][a-z][A-Z]_\-\." />
		</bit101:HBox>
		<!--
		<bit101:HBox>
			<bit101:Label text="Max size:" />
			<bit101:InputText id="maxWidthInput" text="{_fileVO.widthMax}" enabled="{!_fileVO.sizeInheritance}" width="40" restrict="[0-9]" />
			<bit101:Label text="x" />
			<bit101:InputText id="maxHeightInput" text="{_fileVO.heightMax}" enabled="{!_fileVO.sizeInheritance}" width="40" restrict="[0-9]" />
			<bit101:CheckBox id="resizeInheritCheckbox" click="{onInheritChange()}" selected="{_fileVO.sizeInheritance}" label="Inherit" />
		</bit101:HBox>
		-->
		<bit101:HBox>
			<bit101:PushButton width="30" click="{rotate(90)}" label="CW" />
			<bit101:PushButton width="30" click="{rotate(-90)}" label="CCW" />
		</bit101:HBox>
		
		<bit101:PushButton label="Check resized" click="{showResized()}" />
		<!-- result size -->
		
		<!-- status bar -->
		<bit101:Label id="statusLbl" text="{statusStr}" />
	</bit101:VBox>
	
</fu:Container>