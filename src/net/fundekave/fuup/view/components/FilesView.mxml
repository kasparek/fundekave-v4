<?xml version="1.0" encoding="utf-8"?>
<fu:Container xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:fu="net.fundekave.*" 
	xmlns:bit101="com.bit101.components.*"
	addedToStage="{addedToStage()}"
	>
    	  <fx:Script>
    	  	<![CDATA[
				import flashx.textLayout.formats.TextAlign;
				
				import gs.TweenLite;
				import gs.easing.Quad;
				
				import net.fundekave.fuup.model.vo.FileVO;
				
				import net.fundekave.Application;
				import com.bit101.components.Label;
				import com.bit101.components.Window;
				/**
				*import net.fundekave.Application-;
				*import com.bit101.components.Label-;
				*import com.bit101.components.Window-;
    	  		*/
    	  	public static const RESIZE:String = 'resize';
   	  	
    	  	public static const SETTINGS_CHANGE:String = 'settingsChange';
    	  	public static const ACTION_PROCESS:String = 'actionProcess';
    	  	public static const ACTION_UPLOAD:String = 'actionUpload';
    	  	public static const FILE_CHECK_EXITS:String = 'fileCheckExits';
    	  	    	  	
    	  	public static const GAP_HORIZONTAL:int = 5;
    	  	public static const GAP_VERTICAL:int = 5;
				
			[Bindable]
			public var lang:Object;
				
			public var filesNumMax:int;
			public var multiFiles:Boolean = true;
			
			[Bindable] public var settingsVisible:Boolean = true;
			
			private var _autoProcess:Boolean = false;
			[Bindable] public function set autoProcess(v:Boolean):void { _autoProcess = v; autoProcessButtVis = !v }
			public function get autoProcess():Boolean { return _autoProcess; }
			
			[Bindable] public var autoProcessButtVis:Boolean = true;
			
			private var _autoUpload:Boolean = false;
			[Bindable] public function set autoUpload(v:Boolean):void { _autoUpload = v; autoProcessButtVis = !v }
			public function get autoUpload():Boolean { return _autoUpload; }
			
			[Bindable] public var displayContent:Boolean = true;
    	  	
    	  	private function addedToStage():void {
    	  		filesBox.addEventListener(Event.ENTER_FRAME, onResize);
    	  	}
    	  	    	  	
    	  	private var fileRefList:FileReferenceList
			private function browseFiles():void {
				globalMessagesBox.visible = false;
				
				if(multiFiles===true) {
					fileRefList = new FileReferenceList();
					fileRefList.addEventListener(Event.SELECT, onFilesSelect );
					fileRefList.browse([new FileFilter(String(lang.filetypes), "*.jpg;*.gif;*.png")]);
				} else {
					var fileRef:FileReference = new FileReference();
					fileRef.addEventListener(Event.SELECT, onFileSelect );
					fileRef.browse([new FileFilter(String(lang.filetypes), "*.jpg;*.gif;*.png")]);
				}
			}
			
			private var filesArr:Array;
			private function onFilesSelect(e:Event):void {
				filesArr = (e.target as FileReferenceList).fileList;
				if(filesArr.length>0) {
					//---init global progress bar
					globalProgressBar.visible = true;
					globalProgressBar.maximum = filesArr.length;
					globalProgressBar.value = 0;
					globalProgressBar.label = lang.loading; 
					
					populateFiles();
				}
			}
			
			private function onFileSelect(e:Event):void {
				
				var fileRef:FileReference = e.target as FileReference;
				if( fileRef.name ) {
					filesArr = [];
					currFile = fileRef;
					dispatchEvent( new Event( FILE_CHECK_EXITS ));
				}
			}
			
			private var currFileView:FileView;
			public var currFile:FileReference;
						
			private function populateFiles():void {
				if(filesArr.length > 0) {
					currFile = filesArr.shift();
					//---check if file is not already in list
					dispatchEvent( new Event( FILE_CHECK_EXITS ));
					return;
				} else {
					if(autoProcess===true) {
						doAction(ACTION_PROCESS);
					} else if(autoUpload === true) {
						doAction(ACTION_UPLOAD);
					}
				}
			}
			
			public function failFile():void {
				//---set progress
				
				//---show message
				progressInc();
				//---populate next file
				populateFiles();
			}
			
			public function addFile():void {
				//---check for limit
				if(filesBox.numChildren >= filesNumMax) {
					//---show error
					var errWin:Window = new Window(this,200,5,"ERROR");
					errWin.color = 0xff8888;
					errWin.closeTween = {alpha:0,delay:5};
					errWin.height = 50;
					errWin.width = 200;
					errWin.close();
					errWin.setContentAlignHorizontal(TextAlign.CENTER);
					errWin.content.addChild( new Label(null,0,5,lang.filelimiterror) );
					
					globalProgressBar.visible = false;
					currFile = null;
					filesArr = null;
					return;
				}
				
				currFileView = new FileView();
				currFileView.fileVO = new FileVO();
				currFileView.fileVO.showThumb = this.displayContent;
				currFileView.lang = this.lang;
				filesBox.addChild( currFileView );
				//---set filesbox size and child position
				currFileView.alpha = 0;
				var posx:Number = (filesBox.width/2) * Math.random();
				var posy:Number = (filesBox.height/2) * Math.random();
				currFileView.rotation = 180 * Math.random();
				currFileView.move(posx,posy);
				//---wait till filesBox is resized with new element
				//this.addEventListener(FilesView.RESIZE, onFileViewFrame );
				setTimeout( onFileViewFrame, 100, null);
			}
			
			private function addToLayout(child:DisplayObject):void {
				//---set filesbox size and child position
				 
			}
			
			private function resetLayout():void {
				if(filesBox.numChildren>0) {
				var delay:Number = 0;
				for(var i:int=0; i<filesBox.numChildren; i++) {
					var child:DisplayObject = filesBox.getChildAt(i)
					var total:Number = i;
					var cols:Number = Math.floor(filesBox.width / (child.width+GAP_HORIZONTAL));
					var rowsDone:Number = Math.floor(total / cols);
					var rest:Number = total - (cols*rowsDone);
					
					var posx:Number = rest * (child.width+GAP_HORIZONTAL);
					var posy:Number = rowsDone * (child.height+GAP_VERTICAL);
					if(child.x != posx || child.y != posy) {
						trace('LAYOUT::SETTINGNEWPOSITION');  
						TweenLite.to(child,0.5,{x:posx, alpha:1,y:posy,rotation:0
							,delay:delay,ease:Quad.easeInOut, overwrite:0
							});
						delay +=0.01;
					}
				}
				var rows:Number = Math.ceil( filesBox.numChildren / cols );
				filesBox.height = rows * currFileView.height;
				}
			}
			
			private function onFileViewFrame(e:Event):void {
				//this.removeEventListener(FilesView.RESIZE, onFileViewFrame );
				fileLater( currFileView, currFile );
			}
			
			private function fileLater(fileView:FileView, file:FileReference):void {
				fileView.addEventListener( FileView.FILE_UPDATED, onFileCreated );
				fileView.file = file;
			}
			
			private function onFileCreated(e:Event):void {
				var fileView:FileView = e.target as FileView;
				fileView.removeEventListener( FileView.FILE_UPDATED, onFileCreated );
				//---set progress
				progressInc();
				setTimeout(populateFiles,100);
			}
			
			private function progressInc():void {
				globalProgressBar.value = Number(globalProgressBar.value + 1);
				if(globalProgressBar.value == globalProgressBar.maximum) {
					//---hide progress bar
					globalProgressBar.visible = false;
				}
			}
			
			private var fileBoxHeight:int = 0;
			private var fileBoxNumChildred:int = 0;
			private var oldStageWidth:int=0;
			private function onResize(e:Event):void {
				if(displayContent===true) {
					if(Application.application.stage.stageWidth != oldStageWidth) {
						var stage:Stage = Application.application.stage;
						oldStageWidth = stage.stageWidth;
	    	  			filesBox.width = stage.stageWidth-20;
	    	  			trace("STAGERESIZE::NEWFILESBOXSIZE::"+filesBox.width);
	    	  			//---set new positions for children
	    	  			resetLayout();
					}
					if( filesBox.height != fileBoxHeight || fileBoxNumChildred != filesBox.numChildren) {
						
						if( fileBoxNumChildred != filesBox.numChildren ) {
							resetLayout();
							fileBoxNumChildred = filesBox.numChildren;	
						}
						
						if(filesBox.numChildren > 0) {
						
							if( filesBox.height != fileBoxHeight ) {
								fileBoxHeight = filesBox.height;
								Application.application.height = filesBox.height + Fuup.HEIGHT + 300;
							}
							
						} else {
							
							Application.application.height = Fuup.HEIGHT;
							
						}
						dispatchEvent( new Event(RESIZE) );
					}
				}
			}

			private function doAction(actionStr:String):void {
				dispatchEvent( new Event( actionStr ));
			}
			
			private function onChange(e:Event):void {
				dispatchEvent( new Event(SETTINGS_CHANGE) );
			}
			

    	  	]]>
    	  </fx:Script>
	<fu:Container height="25">
		<bit101:HBox y="5" x="5">
			<bit101:PushButton id="selectFilesButt" width="60" click="{browseFiles()}" label="{lang.selectfiles}" />
			
			<fu:Container height="20" width="60" visible="{settingsVisible}">
				<bit101:CheckBox id="correctionsCheckbox" label="{lang.corections}" selected="true" y="5" x="5" />	
			</fu:Container>
			
			<bit101:PushButton id="processButt" visible="{autoProcessButtVis}" width="60" click="{doAction(ACTION_PROCESS)}" label="{lang.process}" />
			<bit101:PushButton id="uploadButt" visible="{!autoUpload}" width="60" click="{doAction(ACTION_UPLOAD)}" label="{lang.upload}" />
			<!-- global progress bar -->
			<bit101:ProgressBar id="globalProgressBar" visible="false" width="275" height="20" maximum="100" />
			<!-- global messages -->
			<bit101:HBox id="globalMessagesBox" backgroundColor="0xaa3333" width="275" height="20" visible="false" alignHorizontal="center">
				<bit101:Label id="globalMessages" text="" color="0xffffff" />
			</bit101:HBox>
		</bit101:HBox>
		<!--
		<bit101:HBox>
			<bit101:Label text="Max size:" />
			<bit101:Label text="Width" />
			<bit101:InputText id="newWidthInput" restrict="[0-9]" text="700" width="40" height="17" />
			<bit101:Label text="Height" />
			<bit101:InputText id="newHeightInput" restrict="[0-9]" text="700" width="40" height="17" />
		</bit101:HBox>
		
		<bit101:HBox id="filesBox" x="5" y="30" mouseChildren="true" />
		-->
	</fu:Container>
    
	<fu:Container id="filesBox" visible="{displayContent}" x="5" y="30" mouseChildren="true" />
		
</fu:Container>