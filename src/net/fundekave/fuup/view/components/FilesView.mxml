<?xml version="1.0" encoding="utf-8"?>
<fu:Container xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:fu="net.fundekave.*" 
	xmlns:bit101="com.bit101.components.*"
	xmlns:components="net.fundekave.fuup.view.components.*"
	addedToStage="{addedToStage()}"
	>
    	  <fx:Script>
    	  	<![CDATA[
    	  		import gs.plugins.BezierPlugin;
    	  		import gs.plugins.TweenPlugin;
    	  		import gs.easing.Quad;
    	  		import gs.TweenLite;
    	  		import mx.events.ResizeEvent;
    	  		import net.fundekave.Application;
    	  		import flash.utils.setTimeout;
    	  		import com.dncompute.canvas.BrowserCanvas;
    	  		
    	  	public static const RESIZE:String = 'resize';
   	  	
    	  	public static const SETTINGS_CHANGE:String = 'settingsChange';
    	  	public static const ACTION_PROCESS:String = 'actionProcess';
    	  	public static const ACTION_UPLOAD:String = 'actionUpload';
    	  	public static const FILE_CHECK_EXITS:String = 'fileCheckExits';
    	  	
    	  	public static const PROGRESS_LABEL_LOADING:String = 'Loading';
    	  	public static const PROGRESS_LABEL_PROCESSING:String = 'Processing';
    	  	public static const PROGRESS_LABEL_UPLOADING:String = 'Uploading';
    	  	
    	  	public static const GAP_HORIZONTAL:int = 5;
    	  	public static const GAP_VERTICAL:int = 5;
    	  	
    	  	
    	  	private function addedToStage():void {
    	  		filesBox.addEventListener(Event.ENTER_FRAME, onResize);
    	  		
    	  		TweenPlugin.activate([BezierPlugin]);
    	  	}
    	  	    	  	
    	  	private var fileRefList:FileReferenceList
			private function browseFiles():void {
				fileRefList = new FileReferenceList();
				fileRefList.addEventListener(Event.SELECT, onFilesSelect );
				fileRefList.browse([new FileFilter("Images [jpg,gif,png]", "*.jpg;*.gif;*.png")]);
			}
			private var filesArr:Array;
			private function onFilesSelect(e:Event):void {
			
				filesArr = (e.target as FileReferenceList).fileList;
				
				//---init global progress bar
				globalProgressBar.visible = true;
				globalProgressBar.maximum = filesArr.length;
				globalProgressBar.value = 0;
				globalProgressBar.label = PROGRESS_LABEL_LOADING; 
				
				populateFiles();
				
			}
			
			private var currFileView:FileView;
			public var currFile:FileReference;
						
			private function populateFiles():void {
				if(filesArr.length > 0) {
					currFile = filesArr.shift();
					//---check if file is not already in list
					dispatchEvent( new Event( FILE_CHECK_EXITS ));
					return;
				}
			}
			
			public function failFile():void {
				//---set progress
				
				//---show message
				progressInc();
				//---populate next file
				populateFiles();
			}
			
			public function addFile():void {
				currFileView = new FileView();
				filesBox.addChild( currFileView );
				//---set filesbox size and child position
				currFileView.alpha = 0;
				var posx:Number = (filesBox.width/2) * Math.random();
				var posy:Number = (filesBox.height/2) * Math.random();
				currFileView.rotation = 180 * Math.random();
				currFileView.move(posx,posy);
				//---wait till filesBox is resized with new element
				this.addEventListener(FilesView.RESIZE, onFileViewFrame );
			}
			
			private function addToLayout(child:DisplayObject):void {
				//---set filesbox size and child position
				 
			}
			
			private function resetLayout():void {
				if(filesBox.numChildren>0) {
				var delay:Number = 0;
				for(var i:int=0; i<filesBox.numChildren; i++) {
					var child:DisplayObject = filesBox.getChildAt(i)
					var total:Number = i;
					var cols:Number = Math.floor(filesBox.width / (child.width+GAP_HORIZONTAL));
					var rowsDone:Number = Math.floor(total / cols);
					var rest:Number = total - (cols*rowsDone);
					
					var posx:Number = rest * (child.width+GAP_HORIZONTAL);
					var posy:Number = rowsDone * (child.height+GAP_VERTICAL);
					if(child.x != posx || child.y != posy) {
						trace('LAYOUT::SETTINGNEWPOSITION');  
						TweenLite.to(child,0.5,{x:posx, alpha:1,y:posy,rotation:0
							,delay:delay,ease:Quad.easeInOut
							,bezier:[{x:filesBox.width/2, y:filesBox.height/2}]});
						delay +=0.01;
					}
				}
				var rows:Number = Math.ceil( filesBox.numChildren / cols );
				filesBox.height = rows * currFileView.height;
				}
			}
			
			private function onFileViewFrame(e:Event):void {
				this.removeEventListener(FilesView.RESIZE, onFileViewFrame );
				fileLater( currFileView, currFile );
			}
			
			private function fileLater(fileView:FileView, file:FileReference):void {
				fileView.file = file;
				fileView.addEventListener( FileView.FILE_CREATED, onFileCreated );
			}
			
			private function onFileCreated(e:Event):void {
				var fileView:FileView = e.target as FileView;
				fileView.removeEventListener( FileView.FILE_CREATED, onFileCreated );
				//---set progress
				progressInc();
				populateFiles();
			}
			
			private function progressInc():void {
				globalProgressBar.value = Number(globalProgressBar.value + 1);
				if(globalProgressBar.value == globalProgressBar.maximum) {
					//---hide progress bar
					globalProgressBar.visible = false;
				}
			}
			
			private var fileBoxHeight:int = 0;
			private var fileBoxNumChildred:int = 0;
			private var oldStageWidth:int=0;
			private function onResize(e:Event):void {
				if(Application.application.stage.stageWidth != oldStageWidth) {
					var stage:Stage = Application.application.stage;
					oldStageWidth = stage.stageWidth;
    	  			filesBox.width = stage.stageWidth-20;
    	  			trace("STAGERESIZE::NEWFILESBOXSIZE::"+filesBox.width);
    	  			//---set new positions for children
    	  			resetLayout();
				}
				if( filesBox.height != fileBoxHeight || fileBoxNumChildred!=filesBox.numChildren) {
					
					
					if( fileBoxNumChildred != filesBox.numChildren ) {
						resetLayout();
						fileBoxNumChildred = filesBox.numChildren;	
					}
					
					if( filesBox.height != fileBoxHeight ) {
						fileBoxHeight = filesBox.height;
						var resizeCanvas:BrowserCanvas = BrowserCanvas.getInstance();
						var newHeight:String = String( filesBox.height + Fuup.HEIGHT + 300 );
						resizeCanvas.height = newHeight; 
						resizeCanvas.width = '100%';
						
						trace('NEWSIZE::' + newHeight);
					}
					dispatchEvent( new Event(RESIZE) );
				}
			}

			private function doAction(actionStr:String):void {
				dispatchEvent( new Event( actionStr ));
			}
			
			private function onChange(e:Event):void {
				dispatchEvent( new Event(SETTINGS_CHANGE) );
			}
			

    	  	]]>
    	  </fx:Script>
	<fu:Container height="25">
		<bit101:HBox y="5" x="5">
			<bit101:PushButton id="selectFilesButt" click="{browseFiles()}" label="Select files" />
			<bit101:PushButton id="processButt" click="{doAction(ACTION_PROCESS)}" label="Process" />
			<bit101:PushButton id="uploadButt" click="{doAction(ACTION_UPLOAD)}" label="Upload" />
			<!-- global progress bar -->
			<bit101:ProgressBar id="globalProgressBar" visible="false" width="275" height="20" maximum="100" />
		</bit101:HBox>
		<!--
		<bit101:HBox>
			<bit101:Label text="Max size:" />
			<bit101:Label text="Width" />
			<bit101:InputText id="newWidthInput" restrict="[0-9]" text="700" width="40" height="17" />
			<bit101:Label text="Height" />
			<bit101:InputText id="newHeightInput" restrict="[0-9]" text="700" width="40" height="17" />
		</bit101:HBox>
		
		<bit101:HBox id="filesBox" x="5" y="30" mouseChildren="true" />
		-->
	</fu:Container>
    
	<fu:Container id="filesBox" x="5" y="30" mouseChildren="true" />
		
</fu:Container>