<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
	width="100%" height="100%" creationComplete="{init()}" xmlns:display="flash.display.*" xmlns:net="flash.net.*" 
	backgroundColor="0x000000"
	>
<mx:Script>
	<![CDATA[
		
		[Embed(source='assets/online.png')]
		[Bindable] public var onLineImg:Class;
		[Embed(source='assets/offline.png')]
		[Bindable] public var offLineImg:Class;
		[Embed(source='assets/goFullscreen.png')]
		[Bindable] public var goFullscreenImg:Class;
		
		import mx.effects.Parallel;
		import mx.effects.Fade;
		import mx.effects.Blur;
		import flash.utils.setTimeout;
		
		public const TIMEOUT_MIN:Number = 500;
		public const FADE_MIN:Number = 500;
		private var timeout:int;
		private var urlLoad:String;
		
		private var loader:URLLoader;
		private var bm1:Bitmap = new Bitmap();
				
		private var effectIn:Parallel = new Parallel();
		
		private var flashVars:Object;
		
		private var timestampLastModified:String = '0';
		
		[Bindable] private var isOnline:Boolean = true;
		[Bindable] private var statusStr:String = '';
				
		private function init():void {
			flashVars = Application.application.parameters;
			if(flashVars.time) {
				timeout = Number(flashVars.time);
				if(timeout < TIMEOUT_MIN) timeout = TIMEOUT_MIN;
			} else timeout = TIMEOUT_MIN;
			if(flashVars.con) {
				urlLoad = flashVars.con+'?u='+flashVars.u;
			}
	        var duration:Number = timeout/5;
	        if(duration < FADE_MIN) duration = FADE_MIN; 
	        
	        var fade1:Fade = new Fade();
			fade1.alphaFrom = 0;
			fade1.alphaTo = 1;
			fade1.duration = duration;
	        effectIn.addChild(fade1);
	        
	         var bl:Blur = new Blur();
			bl.blurXFrom = 0;
			bl.blurXTo = 0;
			bl.blurYFrom = 50;
			bl.blurYTo = 0;
			bl.duration = duration;
	        effectIn.addChild(bl);
	      
	        if(urlLoad) doCheck();
	        
	        systemManager.stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);

		}
		private function doCheck():void {
			var urlLoader:URLLoader = new URLLoader();
			urlLoader.addEventListener(Event.COMPLETE, checkHandler);
			
			
        urlLoader.addEventListener(IOErrorEvent.IO_ERROR, onCheckFault);
			
			urlLoader.load(new URLRequest(urlLoad+'&f=ch'));
		}
		private function onCheckFault(e:Event):void {
			statusStr = 'Connection Error';
			setTimeout(doCheck,timeout);
		}
		private function checkHandler(e:Event):void {
			var data:XML = XML(e.target.data);
			var timestamp:String = String(data.timestamp);
			lastModified = String(data.last);
			var diffTime:Number = Number(data.now) - Number(data.timestamp);
			if(diffTime > (timeout/1000)*2) {
				//OFFFLINE
				isOnline = false;
				statusStr = 'OFFLINE'
			} else {
				//ONLINE
				isOnline = true;
				statusStr = 'ONLINE';
			}
			
			if(timestamp != timestampLastModified) {
				doLoad();
				timestampLastModified = timestamp;
			} else setTimeout(doCheck,timeout);
		}
		private function doLoad():void {
			var imageLoader:Loader = new Loader();
			imageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, loaderHandler);
			imageLoader.load(new URLRequest(urlLoad+'&f=l'));
		}
		private function loaderFaultHandler(e:Event):void {
			
		}
		private function loaderHandler(e:Event):void {
			bm1 = e.target.content;
			bm1.width = showImage.width;
			bm1.height = showImage.height;
			showImage.addChild(bm1);
			effectIn.play([bm1]);
			setTimeout(doCheck,timeout);
		}
		
		private function toggleFullScreen():void {
                try {
                    switch (systemManager.stage.displayState) {
                        case StageDisplayState.FULL_SCREEN:
                            /* If already in full screen mode, switch to normal mode. */
                            systemManager.stage.displayState = StageDisplayState.NORMAL;
                            break;
                        default:
                            /* If not in full screen mode, switch to full screen mode. */
                            systemManager.stage.displayState = StageDisplayState.FULL_SCREEN;
                            break;
                    }
                } catch (err:SecurityError) {
                    // ignore
                }
            }
            
            private function fullScreenHandler(evt:FullScreenEvent):void {
                if (evt.fullScreen) {
                	bm1.width = (bm1.width/bm1.height) * Application.application.height;
                	bm1.height = Application.application.height;
                	showImage.width = bm1.width;
                	showImage.height = bm1.height;
                } else {
                	bm1.width = Application.application.width;
                	bm1.height = Application.application.height;
                    showImage.width = Application.application.width;
                	showImage.height = Application.application.height;
                }
            }
[Bindable] private var lastModified:String = '';
	]]>
</mx:Script>

<mx:UIComponent id="showImage" width="100%" height="100%"
	horizontalCenter="0" verticalCenter="0" 
	 />
<mx:Image source="{(isOnline==true)?(onLineImg):(offLineImg)}" toolTip="Webcam status: {statusStr}" top="10" left="10" />
<mx:Image source="{goFullscreenImg}" toolTip="toggle Fullscreen" top="10" left="31" click="{toggleFullScreen()}" />
	  
</mx:Application>
